-- Create a database called "sales" with three tables: "customers",
-- "orders", and "products".

USE Student_db;

CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  email VARCHAR(100),
  phone VARCHAR(20)
);
 
INSERT INTO customers VALUES
  (1, 'John', 'Doe', 'john.doe@example.com', '555-1234'),
  (2, 'Jane', 'Doe', 'jane.doe@example.com', '555-5678'),
  (3, 'Bob', 'Smith', 'bob.smith@example.com', '555-2468'),
  (4, 'Alice', 'Jones', 'alice.jones@example.com', '555-1357'),
  (5, 'Tom', 'Brown', 'tom.brown@example.com', '555-2468');

CREATE TABLE product (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(100),
  unit_price DECIMAL(10,2),
  description VARCHAR(200)
);
 
INSERT INTO product VALUES
  (1, 'Product A', 10.99, 'Description for Product A'),
  (2, 'Product B', 15.99, 'Description for Product B'),
  (3, 'Product C', 25.99, 'Description for Product C'),
  (4, 'Product D', 49.99, 'Description for Product D'),
  (5, 'Product E', 99.99, 'Description for Product E');
 
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  order_date DATE,
  customer_id INT,
  product_id INT,
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Insert orders
INSERT INTO orders VALUES
  (1, '2022-02-01', 1, 2),
  (2, '2022-02-01', 1, 3),
  (3, '2022-02-02', 2, 1),
  (4, '2022-02-02', 3, 2),
  (5, '2022-02-03', 3, 3),
  (6, '2022-02-04', 4, 4),
  (7, '2022-02-05', 1, 5),
  (8, '2022-02-05', 1, 4),
  (9, '2022-02-06', 2, 5),
  (10, '2022-02-07', 3, 5);



-- 2. Write a query that retrieves the customer's first name,
-- last name, email, and the number of orders they have
-- placed. The results should be ordered by the number of
-- orders in descending order.

SELECT customers.first_name, customers.last_name, customers.email, COUNT(orders.order_id) as num_orders
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id
ORDER BY num_orders DESC;

-- 3. Write a query that retrieves the product name, the total
-- number of orders for each product, and the total revenue
-- generated by each product. The results should be ordered by
-- the total revenue in descending order.

SELECT products.product_name, COUNT(orders.order_id) as num_orders, SUM(products.unit_price) as total_revenue
FROM products
INNER JOIN orders ON products.product_id = orders.product_id
GROUP BY products.product_id
ORDER BY total_revenue DESC;

-- 4. Write a query that retrieves the first name, last name,
-- email, and product name for each order. The results should
-- only include orders where the customer has placed multiple
-- orders.
SELECT c.first_name, c.last_name, c.email, p.product_name
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN products p ON o.product_id = p.product_id
WHERE c.customer_id IN (
SELECT customer_id
FROM orders
GROUP BY customer_id
HAVING COUNT(*) > 1
);



-- 5. Write a query that retrieves the first name, last name, and
-- email for each customer who has placed at least one order
-- for a product with a unit price greater than $50.

 SELECT c.first_name, c.last_name, c.email
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN products p ON o.product_id = p.product_id
WHERE p.unit_price > 50;


-- 6. Write a query that retrieves the product name and the
-- number of times it has been ordered, but only includes
-- products that have been ordered more than once.

SELECT products.product_name, COUNT(orders.product_id) AS num_orders
FROM products
JOIN orders ON products.product_id = orders.product_id
GROUP BY products.product_id
HAVING COUNT(orders.product_id) > 1;