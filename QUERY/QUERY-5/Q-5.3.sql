USE Student_db;

-- 1. Write a SQL query to retrieve the names and salaries of all
-- employees who have a salary greater than the average salary
-- of all employees.

SELECT name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

-- 2. Write a SQL query to retrieve the names and total revenue
-- generated by all customers in the "orders" table, sorted by
-- revenue in descending order.


-- 3. Write a SQL query to retrieve the names and total revenue
-- generated by all customers in the "orders" table, sorted by
-- revenue in descending order, where the total revenue is
-- greater than $10,000.

SELECT customer_name, SUM(revenue) as total_revenue
FROM orders
GROUP BY customer_name
ORDER BY total_revenue DESC;

-- 4. Write a SQL query to retrieve the names and total revenue
-- generated by all customers in the "orders" table, sorted by
-- revenue in descending order, where the total revenue is
-- greater than the average revenue generated by all
-- customers.

SELECT customer_name, SUM(revenue) as total_revenue
FROM orders
GROUP BY customer_name
HAVING total_revenue > 10000
ORDER BY total_revenue DESC;

-- 5. Write a SQL query to retrieve the names and total revenue
-- generated by all customers in the "orders" table, sorted by
-- revenue in descending order, where the total revenue is
-- greater than the average revenue generated by all
-- customers, and the customer is from the "USA" or "Canada".

SELECT customer_name, SUM(revenue) as total_revenue
FROM orders
WHERE country IN ('USA', 'Canada')
GROUP BY customer_name
HAVING total_revenue > (SELECT AVG(revenue) FROM orders)
ORDER BY total_revenue DESC;

-- 6. Write a SQL query to retrieve the names of all employees
-- who have made sales greater than $50,000 in the "orders"
-- table.

SELECT DISTINCT employee_name
FROM orders
WHERE sales_amount > 50000;

-- 7. Write a SQL query to retrieve the names of all employees
-- who have made sales greater than the average sales of all
-- employees in the "orders" table, sorted by sales in
-- descending order.

SELECT employee_name
FROM orders
GROUP BY employee_name
HAVING SUM(sales_amount) > (SELECT AVG(sales_amount) FROM orders)
ORDER BY SUM(sales_amount) DESC;

-- 8. Write a SQL query to retrieve the names and total revenue
-- generated by all customers in the "orders" table, sorted by
-- revenue in descending order, where the customer is from the
-- "USA" and the revenue is greater than $5,000.

SELECT customer_name, SUM(revenue) as total_revenue
FROM orders
WHERE country = 'USA' AND revenue > 5000
GROUP BY customer_name
ORDER BY total_revenue DESC;

-- 9. Write a SQL query to retrieve the names and total revenue
-- generated by all customers in the "orders" table, sorted by
-- revenue in descending order, where the customer is from the
-- "USA" and the revenue is greater than the average revenue
-- generated by all customers from the "USA".

SELECT customer_name, SUM(revenue) as total_revenue
FROM orders
WHERE country = 'USA'
GROUP BY customer_name
HAVING SUM(revenue) > (SELECT AVG(revenue) FROM orders WHERE country = 'USA')
ORDER BY total_revenue DESC;

-- 10. Write a SQL query to retrieve the names and total
-- revenue generated by all customers in the "orders" table,
-- sorted by revenue in descending order, where the customer
-- is from the "USA" and the revenue is greater than the
-- average revenue generated by all customers, and the
-- customer has made at least 2 orders.

SELECT customer_name, SUM(revenue) as total_revenue
FROM orders
WHERE country = 'USA'
GROUP BY customer_name
HAVING SUM(revenue) > (SELECT AVG(revenue) FROM orders WHERE country = 'USA')
AND COUNT(DISTINCT order_id) >= 2
ORDER BY total_revenue DESC;
